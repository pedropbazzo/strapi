{"ast":null,"code":"var _jsxFileName = \"/home/devpedrobazzo/Downloads/strapi-examples/login-react/src/pages/LoginRedirect.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation, useParams } from \"react-router-dom\";\nconst backendUrl = process.env.REACT_APP_BACKEND_URL;\n\nconst LoginRedirect = props => {\n  const [text, setText] = useState('Loading...');\n  const location = useLocation();\n  const params = useParams();\n  const history = useHistory();\n  useEffect(() => {\n    // Successfully logged with the provider\n    // Now logging with strapi by using the access_token (given by the provider) in props.location.search\n    fetch(`${backendUrl}/auth/${params.providerName}/callback${location.search}`).then(res => {\n      if (res.status !== 200) {\n        throw new Error(`Couldn't login to Strapi. Status: ${res.status}`);\n      }\n\n      return res;\n    }).then(res => res.json()).then(res => {\n      // Successfully logged with Strapi\n      // Now saving the jwt to use it for future authenticated requests to Strapi\n      localStorage.setItem('jwt', res.jwt);\n      localStorage.setItem('username', res.user.username);\n      setText('You have been successfully logged in. You will be redirected in a few seconds...');\n      setTimeout(() => history.push('/'), 3000); // Redirect to homepage after 3 sec\n    }).catch(err => {\n      console.log(err);\n      setText('An error occured, please see the developper console.');\n    });\n  }, [history, location.search, params.providerName]);\n  return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 10\n    }\n  }, text);\n};\n\nexport default LoginRedirect;","map":{"version":3,"sources":["/home/devpedrobazzo/Downloads/strapi-examples/login-react/src/pages/LoginRedirect.js"],"names":["React","useEffect","useState","useHistory","useLocation","useParams","backendUrl","process","env","REACT_APP_BACKEND_URL","LoginRedirect","props","text","setText","location","params","history","fetch","providerName","search","then","res","status","Error","json","localStorage","setItem","jwt","user","username","setTimeout","push","catch","err","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,SAAlC,QAAmD,kBAAnD;AAEA,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAA/B;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,YAAD,CAAhC;AACA,QAAMY,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,MAAM,GAAGV,SAAS,EAAxB;AACA,QAAMW,OAAO,GAAGb,UAAU,EAA1B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACAgB,IAAAA,KAAK,CAAE,GAAEX,UAAW,SAAQS,MAAM,CAACG,YAAa,YAAWJ,QAAQ,CAACK,MAAO,EAAtE,CAAL,CACGC,IADH,CACQC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,cAAM,IAAIC,KAAJ,CAAW,qCAAoCF,GAAG,CAACC,MAAO,EAA1D,CAAN;AACD;;AACD,aAAOD,GAAP;AACD,KANH,EAOGD,IAPH,CAOQC,GAAG,IAAIA,GAAG,CAACG,IAAJ,EAPf,EAQGJ,IARH,CAQQC,GAAG,IAAI;AACX;AACA;AACAI,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BL,GAAG,CAACM,GAAhC;AACAF,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCL,GAAG,CAACO,IAAJ,CAASC,QAA1C;AACAhB,MAAAA,OAAO,CAAC,kFAAD,CAAP;AACAiB,MAAAA,UAAU,CAAC,MAAMd,OAAO,CAACe,IAAR,CAAa,GAAb,CAAP,EAA0B,IAA1B,CAAV,CANW,CAMgC;AAC5C,KAfH,EAgBGC,KAhBH,CAgBSC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACApB,MAAAA,OAAO,CAAC,sDAAD,CAAP;AACD,KAnBH;AAoBD,GAvBQ,EAuBN,CAACG,OAAD,EAAUF,QAAQ,CAACK,MAAnB,EAA2BJ,MAAM,CAACG,YAAlC,CAvBM,CAAT;AAyBA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIN,IAAJ,CAAP;AACD,CAhCD;;AAkCA,eAAeF,aAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation, useParams } from \"react-router-dom\";\n\nconst backendUrl = process.env.REACT_APP_BACKEND_URL;\n\nconst LoginRedirect = (props) => {\n  const [text, setText] = useState('Loading...');\n  const location = useLocation();\n  const params = useParams();\n  const history = useHistory();\n\n  useEffect(() => {\n    // Successfully logged with the provider\n    // Now logging with strapi by using the access_token (given by the provider) in props.location.search\n    fetch(`${backendUrl}/auth/${params.providerName}/callback${location.search}`)\n      .then(res => {\n        if (res.status !== 200) {\n          throw new Error(`Couldn't login to Strapi. Status: ${res.status}`);\n        }\n        return res;\n      })\n      .then(res => res.json())\n      .then(res => {\n        // Successfully logged with Strapi\n        // Now saving the jwt to use it for future authenticated requests to Strapi\n        localStorage.setItem('jwt', res.jwt);\n        localStorage.setItem('username', res.user.username);\n        setText('You have been successfully logged in. You will be redirected in a few seconds...');\n        setTimeout(() => history.push('/'), 3000); // Redirect to homepage after 3 sec\n      })\n      .catch(err => {\n        console.log(err);\n        setText('An error occured, please see the developper console.')\n      });\n  }, [history, location.search, params.providerName]);\n\n  return <p>{text}</p>\n};\n\nexport default LoginRedirect;\n"]},"metadata":{},"sourceType":"module"}